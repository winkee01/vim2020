snippet incc "" !b
#include <iostream>$0
endsnippet
snippet incs "" !b
#include <string>$0
endsnippet
snippet incv "" !b
#include <vector>
$0
endsnippet
snippet incst "" !b
#include <stack>
$0
endsnippet
snippet incq "" !b
#include <queue>
$0
endsnippet
snippet incd "" !b
#include <deque>
$0
endsnippet
snippet incmp "" !b
#include <map>
$0
endsnippet
snippet incum "" !b
#include <unordered_map>
$0
endsnippet
snippet incset "" !b
#include <set>
$0
endsnippet
snippet incuset "" !b
#include <unordered_set}
$0
endsnippet
snippet inct "" !b
#include <thread>
$0
endsnippet
snippet incm "" !b
#include <mutex>
$0
endsnippet
snippet inccv "" !b
#include <condition_variable>
$0
endsnippet
snippet incft "" !b
#include <future>
$0
endsnippet
snippet incch "" !b
#include <chrono>
$0
endsnippet
snippet class "class" !b
class ${1:Class}{
public:
    // constructors, asssignment, destructor
    $1();
    $1(const $1&);
    $1& operator=(const $1&);
    ~$1();
    $2
private:
    $3
};
endsnippet
snippet if
if {
    ${VISUAL}
}
endsnippet
snippet ifelse
if else {
    ${VISUAL}
}
endsnippet